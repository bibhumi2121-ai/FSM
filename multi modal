"""""
Author: Bibhu Prasad Mishra, Dillip Kumar Ghose, Deba Prakash Satapathy
"""

#Import required packages
import numpy as np
import rasterio
import joblib
from pyproj import Transformer
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import Ridge
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import VotingRegressor
from sklearn.model_selection import GridSearchCV, KFold
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import contextily as ctx
import rasterio.plot as rioplot
import matplotlib.pyplot as plt


#Input Predictor: Flood conditioning factor dataset
elevation_raster = rasterio.open("__file_path__")
elevation_array = elevation_raster.read(1)
dist_river_raster = rasterio.open("__file_path__")
dfr_array = dist_river_raster.read(1)
slope_raster = rasterio.open("__file_path__")
slope_array = slope_raster.read(1)
flow_dir_raster = rasterio.open("__file_path__")
fd_array = flow_dir_raster.read(1)


#Get Latitude/Longitude from any input features. For ex. Elevation
src_crs = 'EPSG:32643'
target_crs = 'EPSG:4326'
transformer = Transformer.from_crs(src_crs, target_crs)
with rasterio.open(elevation_raster) as dataset:
    geotransform = dataset.transform
    num_rows = dataset.height
    num_cols = dataset.width
    lat_lon_array = np.empty((num_rows, num_cols, 2))
    for row in range(num_rows):
        for col in range(num_cols):
            x, y = rasterio.transform.xy(geotransform, row, col, offset='center')
            lon, lat = transformer.transform(x, y)
            lat_lon_array[row, col, 0] = lat
            lat_lon_array[row, col, 1] = lon
Latitude_array = lat_lon_array[:, :, 0]
Longitude_array = lat_lon_array[:, :, 1]


#Data-preprocessing: Fill/remove Nodata Values after Masking
def fill_nodata_with_average(arr, nodata):
    #Fill the nodata vlaues with average of three surrounding non-nodata values
    n = len(arr)
    result = []
    for i in range(n):
        if arr[i] != nodata:
            result.append(arr[i])
        else:
            valid_values = [arr[j] for j in range(max(i - 2, 0), min(i + 3, n)) if arr[j] != nodata]
            if valid_values:
                result.append(sum(valid_values) / len(valid_values))
            else:
                result.append(nodata)
    return result

def fill_closest_not_nodata(arr, nodata):
    #Fill the nodata values with closest value
    n = len(arr)
    def find_closest_non_nodata(index):
        left = index - 1
        right = index + 1
        while left >= 0 and arr[left] == nodata and right < n and arr[right] == nodata:
            left -= 1
            right += 1
        if left >= 0 and arr[left] != nodata:
            return arr[left]
        elif right < n and arr[right] != nodata:
            return arr[right]
        else:
            return arr[index]
    return [arr[i] if arr[i] != nodata else find_closest_non_nodata(i) for i in range(n)]

def remove_nodata_pixels(depth_map, corresponding_map, no_data_value):
    #Remove Nodata Pixels #Use to extract only flood depth pixels and features for model training
    mask = depth_map == no_data_value
    depth_map_masked = np.ma.masked_array(depth_map, mask).compressed()
    corresponding_map_masked = np.ma.masked_array(corresponding_map, mask).compressed()
    return (np.array(depth_map_masked), np.array(corresponding_map_masked))


#Input Predictand: Observed flood depth maps
no_event = 12 #number of flood depth maps available for training
streamflow_values = ["___, ____, ____, streamflow_range, ____, ____"]
flood_depth_maps = []
train_streamflow_values = []
feature_maps = []

for v in streamflow_values:
    #Converting flood raster to binary maps
    inun_rast = rasterio.open(f"__file_path__{v}.inundation_depth.tif")
    inun_array = inun_rast.read(1)
    flood_depth_maps.append(remove_nodata_pixels(inun_array, elevation_array, inun_rast.nodata)[0])
    feature_maps.append(np.column_stack((remove_nodata_pixels(inun_array,Latitude_array,inun_rast.nodata)[1],
                                         remove_nodata_pixels(inun_array,Longitude_array,inun_rast.nodata)[1],
                                         fill_nodata_with_average(remove_nodata_pixels(inun_array, elevation_array, inun_rast.nodata)[1],elevation_raster.nodata),
                                         fill_nodata_with_average(remove_nodata_pixels(inun_array, dfr_array, inun_rast.nodata)[1],dist_river_raster.nodata),
                                         fill_nodata_with_average(remove_nodata_pixels(inun_array, slope_array, inun_rast.nodata)[1],slope_raster.nodata),
                                         remove_nodata_pixels(inun_array, np.random.uniform(v - 400, v + 400, size=(1684, 3207)), inun_rast.nodata)[1])))

y_train = np.concatenate(flood_depth_maps)
X_train = np.concatenate(feature_maps)


#Data-preprocessing: Normalizing input/target features
scaler = MinMaxScaler()
scaler.fit(X_train)
normalized_features = scaler.transform(X_train)
X_train=normalized_features


#Test flood event dataset (depth maps)
test_event_1 = rasterio.open("__file_path__")
test_event_1_array = test_event_1.read(1)
test_event_2 = rasterio.open("__file_path__")
test_event_2_array = test_event_2.read(1)

# y_test
test_vector = np.concatenate([remove_nodata_pixels(test_event_1_array, elevation_array, test_event_1.nodata)[0],
                              remove_nodata_pixels(test_event_2_array, elevation_array, test_event_2.nodata)[0]])
y_test = test_vector


# Preparing Test Feature Data
feature_matrix1 = np.column_stack((remove_nodata_pixels(test_event_1_array,Latitude_array,test_event_1.nodata)[1], #latitude
                                   remove_nodata_pixels(test_event_1_array,Longitude_array,test_event_1.nodata)[1], #longitude
                                   remove_nodata_pixels(test_event_1_array, elevation_array, test_event_1.nodata)[1], #elevation
                                   fill_nodata_with_average(remove_nodata_pixels(test_event_1_array, dfr_array, test_event_1.nodata)[1],dist_river_raster.nodata), #DFR
                                   remove_nodata_pixels(test_event_1_array, slope_array, test_event_1.nodata)[1], #Slope
                                   remove_nodata_pixels(test_event_1_array, np.random.uniform(test_event_1 - 400, test_event_1 + 400, size=(1684, 3207)), test_event_1.nodata)[1])) #streamflow
